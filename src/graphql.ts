// AUTO-GENERATED by scripts/gen-graphql.ts
import { ApolloServer } from '@apollo/server';
import { expressMiddleware } from '@apollo/server/express4';
import express from 'express';
import cors from 'cors';
import { json } from 'body-parser';
import { PrismaClient } from '@prisma/client';
import { CFG } from './config';

const prisma = new PrismaClient();

const JSONScalar = {
  __serialize(v: any) { return v; },
  __parseValue(v: any) { return v; },
  __parseLiteral(ast: any) { return (ast && (ast.value ?? ast.fields)) ?? null; },
};

const typeDefs = /* GraphQL */ `
scalar JSON
scalar BigInt

  type SorobanEvent {
  id: BigInt
  txHash: String
  contractId: String
  ledger: Int
  topicSignature: String
  topics: JSON
  data: JSON
  createdAt: String
}

type TeamFinanceToken {
  id: BigInt
  blockHeight: Int
  sequence: Int
  address: String
  owner: String
  timestamp: BigInt
  txHash: String
  contractId: String
  name: String
  symbol: String
  totalSupply: BigInt
  decimals: Int
  ipfs: String
  createdAt: String
  envelopeXdr: String
}

  type Query {
  sorobanEvents(id: String, txHash: String, contractId: String, ledger: Int, topicSignature: String, topics: JSON, data: JSON, createdAt: String, limit: Int = 100, offset: Int = 0): [SorobanEvent!]
  teamFinanceTokens(id: String, blockHeight: Int, sequence: Int, address: String, owner: String, timestamp: String, txHash: String, contractId: String, name: String, symbol: String, totalSupply: String, decimals: Int, ipfs: String, createdAt: String, envelopeXdr: String, limit: Int = 100, offset: Int = 0): [TeamFinanceToken!]
  }
`;

const BigIntScalar = {
  __serialize: (value: bigint) => value.toString(),
  __parseValue: (value: string) => BigInt(value),
  __parseLiteral: (ast: any) => BigInt(ast.value),
};

const resolvers = {
  BigInt: BigIntScalar,
  JSON: JSONScalar,
  Query: {
    sorobanEvents: async (_: any, args: any, { prisma }: any) => {
      const where = { ...(args.id !== undefined ? { id: args.id } : {}), ...(args.txHash !== undefined ? { txHash: args.txHash } : {}), ...(args.contractId !== undefined ? { contractId: args.contractId } : {}), ...(args.ledger !== undefined ? { ledger: args.ledger } : {}), ...(args.topicSignature !== undefined ? { topicSignature: args.topicSignature } : {}), ...(args.topics !== undefined ? { topics: args.topics } : {}), ...(args.data !== undefined ? { data: args.data } : {}), ...(args.createdAt !== undefined ? { createdAt: args.createdAt } : {}) };
      return prisma.sorobanEvent.findMany({
        where,
        orderBy: [{ id: 'asc' }],
        take: Math.min(args.limit ?? 100, 1000),
        skip: args.offset ?? 0
      });
    },
    teamFinanceTokens: async (_: any, args: any, { prisma }: any) => {
      const where = { ...(args.id !== undefined ? { id: args.id } : {}), ...(args.blockHeight !== undefined ? { blockHeight: args.blockHeight } : {}), ...(args.sequence !== undefined ? { sequence: args.sequence } : {}), ...(args.address !== undefined ? { address: args.address } : {}), ...(args.owner !== undefined ? { owner: args.owner } : {}), ...(args.timestamp !== undefined ? { timestamp: args.timestamp } : {}), ...(args.txHash !== undefined ? { txHash: args.txHash } : {}), ...(args.contractId !== undefined ? { contractId: args.contractId } : {}), ...(args.name !== undefined ? { name: args.name } : {}), ...(args.symbol !== undefined ? { symbol: args.symbol } : {}), ...(args.totalSupply !== undefined ? { totalSupply: args.totalSupply } : {}), ...(args.decimals !== undefined ? { decimals: args.decimals } : {}), ...(args.ipfs !== undefined ? { ipfs: args.ipfs } : {}), ...(args.createdAt !== undefined ? { createdAt: args.createdAt } : {}), ...(args.envelopeXdr !== undefined ? { envelopeXdr: args.envelopeXdr } : {}) };
      return prisma.teamFinanceToken.findMany({
        where,
        orderBy: [{ id: 'asc' }],
        take: Math.min(args.limit ?? 100, 1000),
        skip: args.offset ?? 0
      });
    }
  }
};

export async function startGraphQL() {
  const server = new ApolloServer({ typeDefs, resolvers });
  await server.start();

  const app = express();
  app.use(cors(), json(), expressMiddleware(server, { context: async () => ({ prisma }) }));

  app.listen(CFG.gqlPort, () => {
    console.log(`ðŸš€ GraphQL ready at http://0.0.0.0:${CFG.gqlPort}/`);
  });
}
